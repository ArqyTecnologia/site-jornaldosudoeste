import Head from "next/head";
import DigitalWeekly from "../../components/DigitalWeekly";
import SeeToo from "../../components/SeeToo";
import styles from "./columns.module.scss";
import { Advertising } from "../../components/Advertising";
import { useEffect, useState } from "react";
import DigitalBiWeekly from "@/src/components/digitalBiWeekly";

export default function Columns() {
    const [dados, setDados] = useState([]);
    const [colunistas, setColunistaNome] = useState([]);
    const [colunistaImg, setColunistaImg] = useState([]);
    const [colunistaDesc, setColunistaDesc] = useState([]);
    const [load, setLoad] = useState(false);

    useEffect(() => {
        fetch('api/controller/buscarBanco/', {
            method: 'POST',
            body: JSON.stringify({ 'busca': 'colunistas' }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            setDados(data.reverse());

            let nomes = new Set();
            let descricoes = new Set();
            let imagens = new Set();

            data.forEach(dado => {
                nomes.add(dado.nome);
                descricoes.add(dado.descricao);
                imagens.add(dado.imagem);
            });

            setColunistaNome(Array.from(nomes));
            setColunistaDesc(Array.from(descricoes));
            setColunistaImg(Array.from(imagens));

            setLoad(true);
        })
        .catch(error => console.error("Erro ao buscar colunistas:", error));
    }, []);

    return (
        <>
            <Head>
                <title> Colunas - JS </title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.png" />
            </Head>
            <main>
                <div className="w-4/5 m-auto">
                    <div className="flex flex-col text-center p-8">
                        <h1 className="font-light text-2xl uppercase"> Colunas</h1>
                        <h2 className="font-light text-xl pt-4"> O mundo na visão dos nossos colunistas </h2>
                    </div>
                    <div className="flex md:flex-row flex-col flex-wrap justify-start m-auto">
                        {load && dados.map((colunas, key) => (
                            <a className="border-gray-200 rounded-lg shadow-[2px_4px_8px_3px_rgba(0,0,0,0.75)] my-4 w-[80%] md:w-[31%] min-h-[150px] ml-4 flex hover:scale-[99%] duration-300" href={`/columns/${colunas.titulo}`} key={key}>
                                <img src={`data:image;base64, ${Buffer.from(colunas.imagem.data).toString('base64')}`} alt="" className="rounded-l-lg w-8/12 max-w-[120px]"/>
                                <div className="p-3">
                                    <h3 className="text-lg font-bold"> { colunas.titulo }</h3>
                                    <h4> Por { colunas.nome } </h4>
                                </div>
                            </a>
                        ))}
                    </div>
                    <Advertising/>
                    <div className={styles.nossosColunistas}>
                        <h1>Conheça nossos colunistas</h1>
                        <div className="flex flex-wrap md:flex-row flex-col">
                            {load && colunistas.map((colunista, key) => (
                                <a className="duration-300 shadow-[2px_4px_8px_3px_rgba(0,0,0,0.75)] md:w-[30%] w-100% flex md:h-[27vh] h-[18vh] mr-[3%] mb-[20px] rounded-[15px] hover:scale-[99%] duration-300" href={`/columns/colunista/${colunista}`} key={key}>
                                    <img src={`data:image;base64, ${Buffer.from(colunistaImg[key].data).toString('base64')}`} className="w-[40%] rounded-l-[15px]" alt="" />
                                    <div className={styles.conteudoColunista}>
                                        <h2> { colunista } </h2>
                                        {colunistaDesc[key] && typeof colunistaDesc[key] === 'string' && colunistaDesc[key].length > 65 ? (
                                            <h3> { `${colunistaDesc[key].substr(0, 65)}...` } </h3>
                                        ) : (
                                            <h3> { colunistaDesc[key] } </h3>
                                        )}
                                    </div>
                                </a>
                            ))}
                        </div>
                    </div>
                </div>
                <Advertising/>
                <SeeToo/>
                <DigitalWeekly/>
                <DigitalBiWeekly/>
            </main>
        </>
    )
}